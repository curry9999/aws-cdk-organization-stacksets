"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeProject = exports.AutoRelease = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const common_1 = require("./common");
const auto_merge_1 = require("./github/auto-merge");
const ignore_file_1 = require("./ignore-file");
const jest_1 = require("./jest");
const license_1 = require("./license");
const node_package_1 = require("./node-package");
const project_1 = require("./project");
const projen_upgrade_1 = require("./projen-upgrade");
const publisher_1 = require("./publisher");
const tasks_1 = require("./tasks");
const version_1 = require("./version");
const PROJEN_SCRIPT = 'projen';
/**
 * (experimental) Automatic bump modes.
 *
 * @experimental
 */
var AutoRelease;
(function (AutoRelease) {
    AutoRelease[AutoRelease["EVERY_COMMIT"] = 0] = "EVERY_COMMIT";
    AutoRelease[AutoRelease["DAILY"] = 1] = "DAILY";
})(AutoRelease = exports.AutoRelease || (exports.AutoRelease = {}));
/**
 * (experimental) Node.js project.
 *
 * @experimental
 */
class NodeProject extends project_1.Project {
    /**
     * @experimental
     */
    constructor(options) {
        var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7;
        super(options);
        this.package = new node_package_1.NodePackage(this, options);
        this.runScriptCommand = (() => {
            switch (this.packageManager) {
                case node_package_1.NodePackageManager.NPM: return 'npm run';
                case node_package_1.NodePackageManager.YARN: return 'yarn run';
                case node_package_1.NodePackageManager.PNPM: return 'pnpm run';
                default: throw new Error(`unexpected package manager ${this.packageManager}`);
            }
        })();
        this.nodeVersion = (_b = options.workflowNodeVersion) !== null && _b !== void 0 ? _b : this.package.minNodeVersion;
        // add PATH for all tasks which includes the project's npm .bin list
        this.tasks.addEnvironment('PATH', '$(npx -c "node -e \\\"console.log(process.env.PATH)\\\"")');
        this.compileTask = this.addTask('compile', {
            description: 'Only compile',
            category: tasks_1.TaskCategory.BUILD,
        });
        this.testCompileTask = this.addTask('test:compile', {
            description: 'compiles the test code',
            category: tasks_1.TaskCategory.TEST,
        });
        this.testTask = this.addTask('test', {
            description: 'Run tests',
            category: tasks_1.TaskCategory.TEST,
        });
        this.testTask.spawn(this.testCompileTask);
        this.buildTask = this.addTask('build', {
            description: 'Full release build (test+compile)',
            category: tasks_1.TaskCategory.BUILD,
        });
        this.addLicense(options);
        this.npmDistTag = this.package.npmDistTag;
        this.npmRegistry = this.package.npmRegistry;
        if ((_c = options.npmignoreEnabled) !== null && _c !== void 0 ? _c : true) {
            this.npmignore = new ignore_file_1.IgnoreFile(this, '.npmignore');
        }
        this.addDefaultGitIgnore();
        if ((_d = options.gitignore) === null || _d === void 0 ? void 0 : _d.length) {
            for (const i of options.gitignore) {
                this.gitignore.exclude(i);
            }
        }
        if ((_e = options.npmignore) === null || _e === void 0 ? void 0 : _e.length) {
            if (!this.npmignore) {
                throw new Error('.npmignore is not defined for an APP project type. Add "npmIgnore: true" to override this');
            }
            for (const i of options.npmignore) {
                this.npmignore.exclude(i);
            }
        }
        this.setScript(PROJEN_SCRIPT, this.package.projenCommand);
        this.setScript('start', `${this.package.projenCommand} start`);
        (_f = this.npmignore) === null || _f === void 0 ? void 0 : _f.exclude(`/${common_1.PROJEN_RC}`);
        (_g = this.npmignore) === null || _g === void 0 ? void 0 : _g.exclude(`/${common_1.PROJEN_DIR}`);
        this.gitignore.include(`/${common_1.PROJEN_RC}`);
        const projen = (_h = options.projenDevDependency) !== null && _h !== void 0 ? _h : true;
        if (projen) {
            const projenVersion = (_j = options.projenVersion) !== null && _j !== void 0 ? _j : `^${common_1.PROJEN_VERSION}`;
            this.addDevDeps(`projen@${projenVersion}`);
        }
        if (!options.defaultReleaseBranch) {
            throw new Error('"defaultReleaseBranch" is temporarily a required option while we migrate its default value from "master" to "main"');
        }
        const defaultReleaseBranch = (_k = options.defaultReleaseBranch) !== null && _k !== void 0 ? _k : 'main';
        // version is read from a committed file called version.json which is how we bump
        this._version = new version_1.Version(this, { releaseBranch: defaultReleaseBranch });
        this.package.addVersion(this._version.currentVersion);
        // indicate if we have anti-tamper configured in our workflows. used by e.g. Jest
        // to decide if we can always run with --updateSnapshot
        this.antitamper = ((_l = options.buildWorkflow) !== null && _l !== void 0 ? _l : (this.parent ? false : true)) && ((_m = options.antitamper) !== null && _m !== void 0 ? _m : true);
        // configure jest if enabled
        // must be before the build/release workflows
        if ((_o = options.jest) !== null && _o !== void 0 ? _o : true) {
            this.jest = new jest_1.Jest(this, options.jestOptions);
        }
        if ((_p = options.buildWorkflow) !== null && _p !== void 0 ? _p : (this.parent ? false : true)) {
            const { workflow, buildJobId } = this.createBuildWorkflow('Build', {
                trigger: {
                    pull_request: {},
                },
                image: options.workflowContainerImage,
                codeCov: (_q = options.codeCov) !== null && _q !== void 0 ? _q : false,
                codeCovTokenSecret: options.codeCovTokenSecret,
            });
            this.buildWorkflow = workflow;
            this.buildWorkflowJobId = buildJobId;
        }
        if ((_r = options.releaseWorkflow) !== null && _r !== void 0 ? _r : (this.parent ? false : true)) {
            const releaseBranches = (_s = options.releaseBranches) !== null && _s !== void 0 ? _s : [defaultReleaseBranch];
            const trigger = {};
            if ((_t = options.releaseEveryCommit) !== null && _t !== void 0 ? _t : true) {
                trigger.push = { branches: releaseBranches };
            }
            if (options.releaseSchedule) {
                trigger.schedule = { cron: options.releaseSchedule };
            }
            const artifactDirectory = (_u = options.artifactsDirectory) !== null && _u !== void 0 ? _u : 'dist';
            const { workflow, buildJobId } = this.createBuildWorkflow('Release', {
                trigger,
                preBuildSteps: [{
                        name: 'Bump to next version',
                        run: this.runTaskCommand(this._version.bumpTask),
                    }],
                pushBranch: '${{ github.ref }}',
                artifactDirectory,
                image: options.workflowContainerImage,
                codeCov: (_v = options.codeCov) !== null && _v !== void 0 ? _v : false,
                codeCovTokenSecret: options.codeCovTokenSecret,
                checkoutWith: {
                    // we must use 'fetch-depth=0' in order to fetch all tags
                    // otherwise tags are not checked out
                    'fetch-depth': 0,
                },
            });
            this.releaseWorkflow = workflow;
            this.publisher = new publisher_1.Publisher(this, {
                workflow: this.releaseWorkflow,
                artifactName: artifactDirectory,
                buildJobId,
                jsiiReleaseVersion: options.jsiiReleaseVersion,
            });
            if ((_w = options.releaseToNpm) !== null && _w !== void 0 ? _w : false) {
                this.publisher.publishToNpm({
                    distTag: this.package.npmDistTag,
                    registry: this.package.npmRegistry,
                });
            }
        }
        else {
            // validate that no release options are selected if the release workflow is disabled.
            if (options.releaseToNpm) {
                throw new Error('"releaseToNpm" is not supported for APP projects');
            }
            if (options.releaseBranches) {
                throw new Error('"releaseBranches" is not supported for APP projects');
            }
            if (options.releaseEveryCommit) {
                throw new Error('"releaseEveryCommit" is not supported for APP projects');
            }
            if (options.releaseSchedule) {
                throw new Error('"releaseSchedule" is not supported for APP projects');
            }
        }
        if ((_x = options.mergify) !== null && _x !== void 0 ? _x : true) {
            this.autoMerge = new auto_merge_1.AutoMerge(this, {
                autoMergeLabel: options.mergifyAutoMergeLabel,
                buildJob: this.buildWorkflowJobId,
            });
            (_y = this.npmignore) === null || _y === void 0 ? void 0 : _y.exclude('/.mergify.yml');
        }
        if ((_z = options.dependabot) !== null && _z !== void 0 ? _z : true) {
            (_0 = this.github) === null || _0 === void 0 ? void 0 : _0.addDependabot(options.dependabotOptions);
        }
        const projenAutoMerge = (_1 = options.projenUpgradeAutoMerge) !== null && _1 !== void 0 ? _1 : true;
        new projen_upgrade_1.ProjenUpgrade(this, {
            autoUpgradeSecret: options.projenUpgradeSecret,
            autoUpgradeSchedule: options.projenUpgradeSchedule,
            labels: (projenAutoMerge && ((_2 = this.autoMerge) === null || _2 === void 0 ? void 0 : _2.autoMergeLabel))
                ? [this.autoMerge.autoMergeLabel]
                : [],
        });
        if ((_3 = options.pullRequestTemplate) !== null && _3 !== void 0 ? _3 : true) {
            (_4 = this.github) === null || _4 === void 0 ? void 0 : _4.addPullRequestTemplate(...(_5 = options.pullRequestTemplateContents) !== null && _5 !== void 0 ? _5 : []);
        }
        if ((_6 = options.rebuildBot) !== null && _6 !== void 0 ? _6 : (this.parent ? false : true)) {
            this.addRebuildBot((_7 = options.rebuildBotCommand) !== null && _7 !== void 0 ? _7 : 'rebuild');
        }
    }
    /**
     * @deprecated use `package.allowLibraryDependencies`
     */
    get allowLibraryDependencies() { return this.package.allowLibraryDependencies; }
    /**
     * @deprecated use `package.entrypoint`
     */
    get entrypoint() { return this.package.entrypoint; }
    /**
     * (experimental) Minimum node.js version required by this package.
     *
     * @experimental
     */
    get minNodeVersion() { return this.package.minNodeVersion; }
    /**
     * (experimental) Maximum node version required by this pacakge.
     *
     * @experimental
     */
    get maxNodeVersion() { return this.package.maxNodeVersion; }
    /**
     * (deprecated) The package manager to use.
     *
     * @deprecated use `package.packageManager`
     */
    get packageManager() { return this.package.packageManager; }
    /**
     * (deprecated) Determines how tasks are executed when invoked as npm scripts (yarn/npm run xyz).
     *
     * @deprecated use `package.npmTaskExecution`
     */
    get npmTaskExecution() { return this.package.npmTaskExecution; }
    /**
     * (experimental) The command to use in order to run the projen CLI.
     *
     * @experimental
     */
    get projenCommand() { return this.package.projenCommand; }
    /**
     * @deprecated use `package.addField(x, y)`
     */
    get manifest() {
        return this.package.manifest;
    }
    /**
     * @experimental
     */
    addBins(bins) {
        this.package.addBin(bins);
    }
    /**
     * (experimental) Replaces the contents of an npm package.json script.
     *
     * @param name The script name.
     * @param command The command to execute.
     * @experimental
     */
    setScript(name, command) {
        this.package.setScript(name, command);
    }
    /**
     * (experimental) Removes the npm script (always successful).
     *
     * @param name The name of the script.
     * @experimental
     */
    removeScript(name) {
        this.package.removeScript(name);
    }
    /**
     * (experimental) Indicates if a script by the name name is defined.
     *
     * @param name The name of the script.
     * @experimental
     */
    hasScript(name) {
        return this.package.hasScript(name);
    }
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.compileTask.exec()`
     */
    addCompileCommand(...commands) {
        for (const c of commands) {
            this.compileTask.exec(c);
        }
    }
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.testTask.exec()`
     */
    addTestCommand(...commands) {
        for (const c of commands) {
            this.testTask.exec(c);
        }
    }
    /**
     * (deprecated) DEPRECATED.
     *
     * @deprecated use `project.buildTask.exec()`
     */
    addBuildCommand(...commands) {
        for (const c of commands) {
            this.buildTask.exec(c);
        }
    }
    /**
     * (experimental) Directly set fields in `package.json`.
     *
     * @param fields The fields to set.
     * @experimental
     */
    addFields(fields) {
        for (const [name, value] of Object.entries(fields)) {
            this.package.addField(name, value);
        }
    }
    /**
     * (experimental) Adds keywords to package.json (deduplicated).
     *
     * @param keywords The keywords to add.
     * @experimental
     */
    addKeywords(...keywords) {
        this.package.addKeywords(...keywords);
    }
    /**
     * @experimental
     */
    get installWorkflowSteps() {
        const install = new Array();
        if (this.nodeVersion) {
            install.push({
                name: 'Setup Node.js',
                uses: 'actions/setup-node@v1',
                with: { 'node-version': this.nodeVersion },
            });
        }
        install.push({
            name: 'Install dependencies',
            run: this.package.installCommand,
        });
        // run "projen"
        install.push({
            name: 'Synthesize project files',
            run: this.package.projenCommand,
        });
        return install;
    }
    /**
     * (experimental) Defines normal dependencies.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addDeps(...deps) {
        return this.package.addDeps(...deps);
    }
    /**
     * (experimental) Defines development/test dependencies.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addDevDeps(...deps) {
        return this.package.addDevDeps(...deps);
    }
    /**
     * (experimental) Defines peer dependencies.
     *
     * When adding peer dependencies, a devDependency will also be added on the
     * pinned version of the declared peer. This will ensure that you are testing
     * your code against the minimum version required from your consumers.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addPeerDeps(...deps) {
        return this.package.addPeerDeps(...deps);
    }
    /**
     * (experimental) Defines bundled dependencies.
     *
     * Bundled dependencies will be added as normal dependencies as well as to the
     * `bundledDependencies` section of your `package.json`.
     *
     * @param deps Names modules to install.
     * @experimental
     */
    addBundledDeps(...deps) {
        return this.package.addBundledDeps(...deps);
    }
    addLicense(options) {
        var _b;
        if (this.package.license) {
            new license_1.License(this, this.package.license, {
                copyrightOwner: (_b = options.copyrightOwner) !== null && _b !== void 0 ? _b : options.authorName,
                copyrightPeriod: options.copyrightPeriod,
            });
        }
    }
    addDefaultGitIgnore() {
        this.gitignore.exclude('# Logs', 'logs', '*.log', 'npm-debug.log*', 'yarn-debug.log*', 'yarn-error.log*', 'lerna-debug.log*', '# Diagnostic reports (https://nodejs.org/api/report.html)', 'report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json', '# Runtime data', 'pids', '*.pid', '*.seed', '*.pid.lock', '# Directory for instrumented libs generated by jscoverage/JSCover', 'lib-cov', '# Coverage directory used by tools like istanbul', 'coverage', '*.lcov', '# nyc test coverage', '.nyc_output', '# Compiled binary addons (https://nodejs.org/api/addons.html)', 'build/Release', '# Dependency directories', 'node_modules/', 'jspm_packages/', '# TypeScript cache', '*.tsbuildinfo', '# Optional eslint cache', '.eslintcache', '# Output of \'npm pack\'', '*.tgz', '# Yarn Integrity file', '.yarn-integrity', '# parcel-bundler cache (https://parceljs.org/)', '.cache');
    }
    createBuildWorkflow(name, options) {
        var _b, _c, _d, _e;
        const buildJobId = 'build';
        const github = this.github;
        if (!github) {
            throw new Error('no github support');
        }
        const workflow = github.addWorkflow(name);
        if (options.trigger) {
            if (options.trigger.issue_comment) {
                throw new Error('"issue_comment" should not be used as a trigger due to a security issue');
            }
            workflow.on(options.trigger);
        }
        workflow.on({
            workflow_dispatch: {},
        });
        const condition = options.condition ? { if: options.condition } : {};
        const preBuildSteps = (_b = options.preBuildSteps) !== null && _b !== void 0 ? _b : [];
        const preCheckoutSteps = (_c = options.preCheckoutSteps) !== null && _c !== void 0 ? _c : [];
        const checkoutWith = options.checkoutWith ? { with: options.checkoutWith } : {};
        const postSteps = (_d = options.postSteps) !== null && _d !== void 0 ? _d : [];
        const antitamperSteps = (options.antitamperDisabled || !this.antitamper) ? [] : [{
                name: 'Anti-tamper check',
                run: 'git diff --exit-code',
            }];
        const commitChanges = !options.commit ? [] : [{
                name: 'Commit changes',
                run: `git commit -am "${options.commit}"`,
            }];
        const pushChanges = !options.pushBranch ? [] : [
            {
                name: 'Push commits',
                run: 'git push origin $BRANCH',
                env: {
                    BRANCH: options.pushBranch,
                },
            },
            // push tags only after we've managed to push our commits in order to
            // avoid tags being pushed but commits being rejected due to new commits
            // see https://github.com/projen/projen/issues/553
            {
                name: 'Push tags',
                run: 'git push --follow-tags origin $BRANCH',
                env: {
                    BRANCH: options.pushBranch,
                },
            },
        ];
        const job = {
            'runs-on': 'ubuntu-latest',
            'env': {
                CI: 'true',
            },
            ...condition,
            'steps': [
                ...preCheckoutSteps,
                // check out sources.
                {
                    name: 'Checkout',
                    uses: 'actions/checkout@v2',
                    ...checkoutWith,
                },
                // install dependencies
                ...this.installWorkflowSteps,
                // perform an anti-tamper check immediately after we run projen.
                ...antitamperSteps,
                // sets git identity so we can push later
                {
                    name: 'Set git identity',
                    run: [
                        'git config user.name "Auto-bump"',
                        'git config user.email "github-actions@github.com"',
                    ].join('\n'),
                },
                // if there are changes, creates a bump commit
                ...preBuildSteps,
                // build (compile + test)
                {
                    name: 'Build',
                    run: this.runTaskCommand(this.buildTask),
                },
                // run codecov if enabled or a secret token name is passed in
                // AND jest must be configured
                ...(options.codeCov || options.codeCovTokenSecret) && ((_e = this.jest) === null || _e === void 0 ? void 0 : _e.config) ? [{
                        name: 'Upload coverage to Codecov',
                        uses: 'codecov/codecov-action@v1',
                        with: options.codeCovTokenSecret ? {
                            token: `\${{ secrets.${options.codeCovTokenSecret} }}`,
                            directory: this.jest.config.coverageDirectory,
                        } : {
                            directory: this.jest.config.coverageDirectory,
                        },
                    }] : [],
                // anti-tamper check (fails if there were changes to committed files)
                // this will identify any non-committed files generated during build (e.g. test snapshots)
                ...antitamperSteps,
                // if required, commit changes to the repo
                ...commitChanges,
                // push bump commit
                ...pushChanges,
                ...postSteps,
            ],
        };
        if (options.image) {
            job.container = { image: options.image };
        }
        if (options.artifactDirectory) {
            job.steps.push({
                name: 'Upload artifact',
                uses: 'actions/upload-artifact@v2.1.1',
                with: {
                    name: options.artifactDirectory,
                    path: options.artifactDirectory,
                },
            });
        }
        workflow.addJobs({ [buildJobId]: job });
        return { workflow, buildJobId };
    }
    /**
     * (experimental) Returns the shell command to execute in order to run a task.
     *
     * If
     * npmTaskExecution is set to PROJEN, the command will be `npx projen TASK`.
     * If it is set to SHELL, the command will be `yarn run TASK` (or `npm run
     * TASK`).
     *
     * @param task The task for which the command is required.
     * @experimental
     */
    runTaskCommand(task) {
        switch (this.package.npmTaskExecution) {
            case node_package_1.NpmTaskExecution.PROJEN: return `${this.package.projenCommand} ${task.name}`;
            case node_package_1.NpmTaskExecution.SHELL: return `${this.runScriptCommand} ${task.name}`;
            default:
                throw new Error(`invalid npmTaskExecution mode: ${this.package.npmTaskExecution}`);
        }
    }
    addRebuildBot(command) {
        const postComment = (message) => ({
            name: 'Post comment to issue',
            uses: 'peter-evans/create-or-update-comment@v1',
            with: {
                'issue-number': '${{ github.event.issue.number }}',
                'body': `_projen_: ${message}`,
            },
        });
        this.createBuildWorkflow('rebuild-bot', {
            // trigger: { issue_comment: { types: ['created'] } }, // <--- disabled due to a security issue
            condition: `\${{ github.event.issue.pull_request && contains(github.event.comment.body, '@projen ${command}') }}`,
            antitamperDisabled: true,
            // since the "issue_comment" event is not triggered on a branch, we need to resolve
            // the git ref of the pull request before we check out
            preCheckoutSteps: [
                postComment('Rebuild started'),
                {
                    name: 'Get pull request branch',
                    id: 'query_pull_request',
                    env: { PULL_REQUEST_URL: '${{ github.event.issue.pull_request.url }}' },
                    run: [
                        'rm -f /tmp/pr.json',
                        'curl --silent $PULL_REQUEST_URL > /tmp/pr.json',
                        'BRANCH_STR=$(cat /tmp/pr.json | jq ".head.ref")',
                        'REPO_NAME=$(cat /tmp/pr.json | jq ".head.repo.full_name")',
                        'echo "::set-output name=branch::$(node -p $BRANCH_STR)"',
                        'echo "::set-output name=repo::$(node -p $REPO_NAME)"',
                    ].join('\n'),
                },
            ],
            // tell checkout to use the branch we acquired at the previous step
            checkoutWith: {
                ref: '${{ steps.query_pull_request.outputs.branch }}',
                repository: '${{ steps.query_pull_request.outputs.repo }}',
            },
            // commit changes
            commit: 'chore: update generated files',
            // and push to the pull request branch
            pushBranch: '${{ steps.query_pull_request.outputs.branch }}',
            postSteps: [
                postComment('Rebuild complete. Updates pushed to pull request branch.'),
            ],
        });
    }
}
exports.NodeProject = NodeProject;
_a = JSII_RTTI_SYMBOL_1;
NodeProject[_a] = { fqn: "projen.NodeProject", version: "0.16.42" };
//# sourceMappingURL=data:application/json;base64,