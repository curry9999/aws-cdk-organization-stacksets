"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Publisher = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const component_1 = require("./component");
const JSII_RELEASE_VERSION = 'latest';
/**
 * (experimental) Implements GitHub jobs for publishing modules to package managers.
 *
 * kw
 * Under the hood, it uses https://github.com/aws/jsii-release
 *
 * @experimental
 */
class Publisher extends component_1.Component {
    /**
     * @experimental
     */
    constructor(project, options) {
        var _b;
        super(project);
        this.workflow = options.workflow;
        this.buildJobId = options.buildJobId;
        this.artifactName = options.artifactName;
        this.jsiiReleaseVersion = (_b = options.jsiiReleaseVersion) !== null && _b !== void 0 ? _b : JSII_RELEASE_VERSION;
    }
    /**
     * (experimental) Publishes artifacts from `js/**` to npm.
     *
     * @param options Options.
     * @experimental
     */
    publishToNpm(options) {
        var _b;
        const npmTokenSecret = (_b = options.npmTokenSecret) !== null && _b !== void 0 ? _b : 'NPM_TOKEN';
        this.workflow.addJobs({
            release_npm: {
                'name': 'Release to NPM',
                'needs': this.buildJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    this.renderDownloadArtifactStep(),
                    {
                        name: 'Release',
                        run: this.renderJsiiReleaseCommand('jsii-release-npm'),
                        env: {
                            NPM_TOKEN: `\${{ secrets.${npmTokenSecret} }}`,
                            NPM_DIST_TAG: options.distTag,
                            NPM_REGISTRY: options.registry,
                        },
                    },
                ],
            },
        });
    }
    /**
     * (experimental) Publishes artifacts from `dotnet/**` to NuGet Gallary.
     *
     * @param options Options.
     * @experimental
     */
    publishToNuget(options) {
        var _b;
        const nugetApiKeySecret = (_b = options.nugetApiKeySecret) !== null && _b !== void 0 ? _b : 'NUGET_API_KEY';
        this.workflow.addJobs({
            release_nuget: {
                'name': 'Release to Nuget',
                'needs': this.buildJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    this.renderDownloadArtifactStep(),
                    {
                        name: 'Release',
                        run: this.renderJsiiReleaseCommand('jsii-release-nuget'),
                        env: {
                            NUGET_API_KEY: `\${{ secrets.${nugetApiKeySecret} }}`,
                        },
                    },
                ],
            },
        });
    }
    /**
     * (experimental) Publishes artifacts from `java/**` to Maven.
     *
     * @param options Options.
     * @experimental
     */
    publishToMaven(options) {
        var _b, _c, _d, _e, _f;
        const mavenGpgPrivateKeySecret = (_b = options.mavenGpgPrivateKeySecret) !== null && _b !== void 0 ? _b : 'MAVEN_GPG_PRIVATE_KEY';
        const mavenGpgPrivateKeyPassphrase = (_c = options.mavenGpgPrivateKeyPassphrase) !== null && _c !== void 0 ? _c : 'MAVEN_GPG_PRIVATE_KEY_PASSPHRASE';
        const mavenUsername = (_d = options.mavenUsername) !== null && _d !== void 0 ? _d : 'MAVEN_USERNAME';
        const mavenPassword = (_e = options.mavenPassword) !== null && _e !== void 0 ? _e : 'MAVEN_PASSWORD';
        const mavenStagingProfileId = (_f = options.mavenStagingProfileId) !== null && _f !== void 0 ? _f : 'MAVEN_STAGING_PROFILE_ID';
        this.workflow.addJobs({
            release_maven: {
                'name': 'Release to Maven',
                'needs': this.buildJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    this.renderDownloadArtifactStep(),
                    {
                        name: 'Release',
                        run: this.renderJsiiReleaseCommand('jsii-release-maven'),
                        env: {
                            MAVEN_SERVER_ID: options.mavenServerId,
                            MAVEN_REPOSITORY_URL: options.mavenRepositoryUrl,
                            MAVEN_GPG_PRIVATE_KEY: `\${{ secrets.${mavenGpgPrivateKeySecret} }}`,
                            MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: `\${{ secrets.${mavenGpgPrivateKeyPassphrase} }}`,
                            MAVEN_PASSWORD: `\${{ secrets.${mavenPassword} }}`,
                            MAVEN_USERNAME: `\${{ secrets.${mavenUsername} }}`,
                            MAVEN_STAGING_PROFILE_ID: `\${{ secrets.${mavenStagingProfileId} }}`,
                        },
                    },
                ],
            },
        });
    }
    /**
     * (experimental) Publishes wheel artifacts from `python` to PyPI.
     *
     * @param options Options.
     * @experimental
     */
    publishToPyPi(options) {
        var _b, _c;
        const twineUsername = (_b = options.twineUsernameSecret) !== null && _b !== void 0 ? _b : 'TWINE_USERNAME';
        const twinePassword = (_c = options.twinePasswordSecret) !== null && _c !== void 0 ? _c : 'TWINE_PASSWORD';
        this.workflow.addJobs({
            release_pypi: {
                'name': 'Release to PyPi',
                'needs': this.buildJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    this.renderDownloadArtifactStep(),
                    {
                        name: 'Release',
                        run: this.renderJsiiReleaseCommand('jsii-release-pypi'),
                        env: {
                            TWINE_USERNAME: `\${{ secrets.${twineUsername} }}`,
                            TWINE_PASSWORD: `\${{ secrets.${twinePassword} }}`,
                            ...(options.twineRegistryUrl && { TWINE_REPOSITORY_URL: options.twineRegistryUrl }),
                        },
                    },
                ],
            },
        });
    }
    /**
     * (experimental) Adds a go publishing job.
     *
     * @param options Options.
     * @experimental
     */
    publishToGo(options) {
        var _b, _c, _d;
        const githubTokenSecret = (_b = options.githubTokenSecret) !== null && _b !== void 0 ? _b : 'GO_GITHUB_TOKEN';
        this.workflow.addJobs({
            release_golang: {
                'name': 'Release to Go',
                'needs': this.buildJobId,
                'runs-on': 'ubuntu-latest',
                'container': {
                    image: 'jsii/superchain',
                },
                'steps': [
                    this.renderDownloadArtifactStep(),
                    {
                        name: 'Release',
                        run: this.renderJsiiReleaseCommand('jsii-release-golang'),
                        env: {
                            GITHUB_REPO: options.githubRepo,
                            GITHUB_TOKEN: `\${{ secrets.${githubTokenSecret} }}`,
                            GIT_BRANCH: options.gitBranch,
                            GIT_USER_NAME: (_c = options.gitUserName) !== null && _c !== void 0 ? _c : 'GitHub Actions',
                            GIT_USER_EMAIL: (_d = options.gitUserEmail) !== null && _d !== void 0 ? _d : 'github-actions@github.com',
                            GIT_COMMIT_MESSAGE: options.gitCommitMessage,
                        },
                    },
                ],
            },
        });
    }
    renderJsiiReleaseCommand(subcommand) {
        return `npx -p jsii-release@${this.jsiiReleaseVersion} ${subcommand}`;
    }
    renderDownloadArtifactStep() {
        return {
            name: 'Download build artifacts',
            uses: 'actions/download-artifact@v2',
            with: {
                name: this.artifactName,
                path: 'dist',
            },
        };
    }
}
exports.Publisher = Publisher;
_a = JSII_RTTI_SYMBOL_1;
Publisher[_a] = { fqn: "projen.Publisher", version: "0.16.42" };
//# sourceMappingURL=data:application/json;base64,